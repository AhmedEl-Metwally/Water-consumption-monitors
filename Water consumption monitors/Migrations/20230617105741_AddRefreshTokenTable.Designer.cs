// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Water_consumption_monitors.Date;

#nullable disable

namespace Water_consumption_monitors.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230617105741_AddRefreshTokenTable")]
    partial class AddRefreshTokenTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FristName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceNumber"), 1L, 1);

                    b.Property<int?>("AmountOfConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentConsumptionAmount")
                        .HasColumnType("int");

                    b.Property<string>("FiscalYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("FromTheDateOf")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FromTheDateTo")
                        .HasColumnType("date");

                    b.Property<int?>("HouseType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<string>("InvoicesNote")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("PreviousConsumptionAmount")
                        .HasColumnType("int");

                    b.Property<bool?>("SanitationIsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SubscriberNumber")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<int?>("SubscriptionNumber")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<decimal?>("TaxFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TheValueOfWaterConsumption")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalBill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WasteWaterConsumptionValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceNumber");

                    b.HasIndex("HouseType");

                    b.HasIndex("SubscriberNumber");

                    b.HasIndex("SubscriptionNumber");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.Slidedistribution", b =>
                {
                    b.Property<int>("SlideNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlideNumber"), 1L, 1);

                    b.Property<int?>("AmountExpenditureSlide")
                        .HasColumnType("int");

                    b.Property<decimal?>("PricePerCubicMeterOfWater")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceServiceSewage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("priceServiceSewage");

                    b.Property<string>("SlideDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SlideDistributionNote")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TypesCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("SlideNumber")
                        .HasName("PK_Slide distribution");

                    b.ToTable("Slidedistribution");
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.Subscriber", b =>
                {
                    b.Property<int>("SubscriberIdentityNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriberIdentityNumber"), 1L, 1);

                    b.Property<string>("SubscriberArea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubscriberGovernorate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SubscriberName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SubscriberNote")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("SubscriberPhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("SubscriberIdentityNumber");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionNumber"), 1L, 1);

                    b.Property<int?>("HouseType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<bool?>("IsThereSanitation")
                        .HasColumnType("bit");

                    b.Property<int?>("SubscriberNumber")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<string>("SubscriptionNote")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TheLastReadingOfTheMeter")
                        .HasColumnType("int");

                    b.Property<int?>("TheNumberOfFloorsOfTheHouse")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionNumber");

                    b.HasIndex("HouseType");

                    b.HasIndex("SubscriberNumber");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.TypesOfRealEstate", b =>
                {
                    b.Property<int>("TypesCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .IsFixedLength();

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypesCode"), 1L, 1);

                    b.Property<string>("TypesName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TypesNote")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TypesCode")
                        .HasName("PK_Types of real estate");

                    b.ToTable("TypesOfRealEstate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Water_consumption_monitors.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Water_consumption_monitors.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Water_consumption_monitors.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Water_consumption_monitors.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.ApplicationUser", b =>
                {
                    b.OwnsMany("Water_consumption_monitors.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Expireson")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.Invoice", b =>
                {
                    b.HasOne("Water_consumption_monitors.Models.TypesOfRealEstate", "HouseTypeNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("HouseType")
                        .HasConstraintName("FK_Invoices_Types of real estate");

                    b.HasOne("Water_consumption_monitors.Models.Subscriber", "SubscriberNumberNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("SubscriberNumber")
                        .HasConstraintName("FK_Invoices_Subscriber");

                    b.HasOne("Water_consumption_monitors.Models.Subscription", "SubscriptionNumberNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("SubscriptionNumber")
                        .HasConstraintName("FK_Invoices_Subscriptions");

                    b.Navigation("HouseTypeNavigation");

                    b.Navigation("SubscriberNumberNavigation");

                    b.Navigation("SubscriptionNumberNavigation");
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.Subscription", b =>
                {
                    b.HasOne("Water_consumption_monitors.Models.TypesOfRealEstate", "HouseTypeNavigation")
                        .WithMany("Subscriptions")
                        .HasForeignKey("HouseType")
                        .HasConstraintName("FK_Subscriptions_Types of real estate");

                    b.HasOne("Water_consumption_monitors.Models.Subscriber", "SubscriberNumberNavigation")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberNumber")
                        .HasConstraintName("FK_Subscriptions_Subscriber");

                    b.Navigation("HouseTypeNavigation");

                    b.Navigation("SubscriberNumberNavigation");
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.Subscriber", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.Subscription", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Water_consumption_monitors.Models.TypesOfRealEstate", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
